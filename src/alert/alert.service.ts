import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf } from 'telegraf';

@Injectable()
export class AlertService {
  private bot: Telegraf;
  private lastAlertMessage: string[] = [];

  constructor(private configService: ConfigService) {
    this.bot = new Telegraf(this.configService.get('TELEGRAM_TOKEN'));
  }

  async sendWhaleAlert(
    signature: string,
    amount: number,
    from: string,
    to: string,
    mint: string,
  ) {
    const message = `
ðŸš¨ *Whale Alert* ðŸš¨

ðŸ’¸ *Transaction*: [ðŸ…ƒ](https://solscan.io/tx/${signature}) \`${signature}\`

ðŸ’° *Amount*: \`${amount.toLocaleString()} USDC \`

ðŸ”„ *From*: [ðŸ…µ](https://solscan.io/account/${from}) \`${from}\`

ðŸ”œ *To*: [ðŸ…¸](https://solscan.io/account/${to}) \`${to}\`

ðŸ’³ *Mint*: [ðŸ…¼](https://solscan.io/token/${mint}) \`${mint}\`

ðŸ‘¥ *Join our Telegram group*: [@whalealert](https://t.me/whalealert)
ðŸ’¡ 
`;

    this.lastAlertMessage.push(message);
    // await this.botService.sendWhaleAlert(message);
    await this.bot.telegram.sendMessage(
      this.configService.get('CHATID'),
      message,
      {
        parse_mode: 'Markdown',
      },
    );
  }

  async sendLastAlert() {
    return (
      this.lastAlertMessage[this.lastAlertMessage.length - 1] ||
      'No alerts available.'
    );
  }
}
